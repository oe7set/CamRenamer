[project]
name = "camrenamer"
version = "1.0.0"
description = "Rename USB Camera devices based on their physical location."
authors = [
    { name = "Erwin Spitaler", email = "erwin.spitaler@outlook.com" }
]
readme = "README.md"
requires-python = ">=3.12"
license = { text = "MIT" }
keywords = ["camera", "usb", "rename", "windows", "registry", "pyside6"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Video",
    "Topic :: System :: Hardware",
    "Topic :: Utilities",
]
dependencies = [
    "pyside6>=6.10.0",
]

[project.urls]
Homepage = "https://github.com/oe7set/camrenamer"
Repository = "https://github.com/oe7set/camrenamer"
"Bug Tracker" = "https://github.com/oe7set/camrenamer/issues"

[project.scripts]
camrenamer = "camrenamer.main_complete:main"

[project.gui-scripts]
camrenamer-gui = "camrenamer.main_complete:main"

## Build system
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

## Linting configuration
[tool.ruff]
line-length = 130
select = [
    "E",   # pycodestyle errors (formatting)
    "W",   # pycodestyle warnings
    "F",   # pyflakes (undefined names, unused imports)
    "I",   # isort issues (import sorting)
    "C",   # flake8-comprehensions (list/set/dict comprehensions)
    "B",   # flake8-bugbear (potential bugs and performance issues)
    "UP",  # pyupgrade (modern Python syntax)
    "SIM", # flake8-simplify (code simplification)
    "TCH", # flake8-type-checking (type checking imports)
]
src = ["src"]
ignore = [
    "C901",   # Ignore "too complex" errors
    "E501",   # Line too long (handled by formatter)
    "B008",   # Do not perform function calls in argument defaults
]

[tool.ruff.isort]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-third-party = ["PySide6"]
force-single-line = false
combine-as-imports = true

[tool.ruff.mccabe]
max-complexity = 10

## Testing configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--color=yes"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

## Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "pyinstaller>=6.16.0",
    "ruff>=0.14.1",
    "pytest>=8.0.0",
    "pytest-qt>=4.2.0",
    "pytest-cov>=4.0.0",
    "coverage[toml]>=7.0.0",
    "black>=24.0.0",
    "mypy>=1.8.0",
]

build = [
    "pyinstaller>=6.16.0"
]

docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
]
